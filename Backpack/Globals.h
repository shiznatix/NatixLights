//pin numbers
const int POWER_PIN = 3;
const int RADIO_PIN = A3;
const int NEOPIXEL_PIN = 4;

const int NEOPIXEL_COUNT = 55;

//setup our animation types
const byte ANIM_TYPE_NONE = 0;
const byte ANIM_TYPE_CAUTION = 1;
const byte ANIM_TYPE_LEFT_TURN = 2;
const byte ANIM_TYPE_RIGHT_TURN = 3;
const byte ANIM_TYPE_STOP = 4;
const byte ANIM_TYPE_HAPPY = 5;
const byte ANIM_TYPE_STOP_LEFT_TURN = 6;
const byte ANIM_TYPE_STOP_RIGHT_TURN = 7;

const int ANIM_FRAMES = 5;

byte mCurrentAnimType = ANIM_TYPE_CAUTION;

Adafruit_NeoPixel mNeoPixelStrip = Adafruit_NeoPixel(NEOPIXEL_COUNT, NEOPIXEL_PIN, NEO_GRB + NEO_KHZ800);

//setup our colors
const byte MAX_COLOR = 100;
const uint32_t COLOR_RED = mNeoPixelStrip.Color(MAX_COLOR, 0, 0);
const uint32_t COLOR_GREEN = mNeoPixelStrip.Color(0, MAX_COLOR, 0);
const uint32_t COLOR_BLUE = mNeoPixelStrip.Color(0, 0, MAX_COLOR);
const uint32_t COLOR_PURPLE = mNeoPixelStrip.Color(MAX_COLOR, 0, MAX_COLOR);
const uint32_t COLOR_OFF = mNeoPixelStrip.Color(0, 0, 0);

//setup our timers
const unsigned int PIXEL_REFERSH_DELAY = 200;//milliseconds, maximum value must be the lowest other delay value
const unsigned int BLINK_DELAY = 500;//milliseconds
const unsigned int FRAME_DELAY = 200;//milliseconds
const unsigned int RADIO_SIGNAL_TIMEOUT = 3000;//milliseconds
boolean mIsBlinking = false;
byte mCurrentAnimFrame = 0;
unsigned long mCurrentTime = 0;
unsigned long mRefreshPixelsTimer = 0;
unsigned long mBlinkTimer = 0;
unsigned long mFrameTimer = 0;
unsigned long mRadioTimeoutTimer = 0;

const String RADIO_SIGNAL_PREFIX = "vBH";
const int RADIO_PREFIX_LENGTH = 3;

//animations
//animations are always shown in a single color to be determined by the function params
const byte ANIM_CAUTION[ANIM_FRAMES][NEOPIXEL_COUNT] = {
  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
  
  { 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0 },
  
  { 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0 },
  
  { 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0 },
  
  { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1,
    1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
};

//static images
const uint32_t IMAGE_LEFT_TURN[NEOPIXEL_COUNT] = {
  COLOR_OFF, COLOR_OFF, COLOR_BLUE, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF,
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_BLUE, COLOR_BLUE, COLOR_OFF,
  COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE,
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_BLUE, COLOR_BLUE, COLOR_OFF,
  COLOR_OFF, COLOR_OFF, COLOR_BLUE, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF
};

const uint32_t IMAGE_STOP_LEFT_TURN[NEOPIXEL_COUNT] = {
  COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF,
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_RED, COLOR_OFF,
  COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED,
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_RED, COLOR_OFF,
  COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF
};

const uint32_t IMAGE_RIGHT_TURN[NEOPIXEL_COUNT] = {
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_BLUE, COLOR_OFF, COLOR_OFF,
  COLOR_OFF, COLOR_BLUE, COLOR_BLUE, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF,
  COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE, COLOR_BLUE,
  COLOR_OFF, COLOR_BLUE, COLOR_BLUE, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF,
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_BLUE, COLOR_OFF, COLOR_OFF
};

const uint32_t IMAGE_STOP_RIGHT_TURN[NEOPIXEL_COUNT] = {
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF,
  COLOR_OFF, COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF,
  COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED,
  COLOR_OFF, COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF,
  COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF
};

const uint32_t IMAGE_STOP[NEOPIXEL_COUNT] = {
  COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_RED, COLOR_RED,
  COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_RED,
  COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_RED,
  COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_RED,
  COLOR_RED, COLOR_RED, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_OFF, COLOR_OFF, COLOR_RED, COLOR_OFF, COLOR_RED, COLOR_RED
  /*
  1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1,
  1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
  1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1,
  1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
  1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1
  */
};

const uint32_t IMAGE_HAPPY[NEOPIXEL_COUNT] = {
  COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN,
  COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN,
  COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF,
  COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF,
  COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_GREEN, COLOR_OFF, COLOR_OFF, COLOR_GREEN, COLOR_OFF
};
